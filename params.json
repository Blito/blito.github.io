{"name":"Blito's workshop","tagline":"","body":"# Welcome\r\nMy name is Pablo, though everyone calls me Blito. I'm a 25-year-old Software Engineer, currently working as a C++ developer for a little bit more than 2 years, with experience in computer vision and high-performance code bases. \r\n\r\nPlaying videogames is something I've been enjoying for the last 20 years. It is something that shaped my personal life, my academic and professional career. \r\n\r\nThis is a brief summary of some projects I have been working on, most of them on my free time.\r\n\r\nGame development is something I would like to focus on, professionally. So if you have an open position, feel free to contact me at pabloarubi at gmail.\r\n\r\n<github.com/Blito>\r\n\r\n### Projects\r\n- SimEco\r\n- Recreito\r\n- Unreal Engine FPS Demo\r\n- Unity RTS Demo\r\n- Bullet Demo\r\n- I am Mutsu, please save me!\r\n- League of Legends Wikia\r\n- Escape de Scylla\r\n\r\n---\r\n\r\n## SimEco\r\n*My current job.*\r\n\r\nSimEco is a learning platform for Ultrasound technicians. At its core is an Ultrasound Simulator, although some other layers live on top of that (like practice exercises).\r\n\r\nWe create a 3D world with a human torso (using a CT scan's output as a source), and place a virtual transducer on top of it. The transducer is controlled by the student using a PSMove, simulating a real version of it.\r\n\r\nSimEco is designed as a layered application. At the top, a UI made with Qt displays menus, handles user events and renders the underlying layer's output: the simulation itself. The second layer is the simulator's core, and is built as a statically linked library. It runs using a game-loop structure, with modules that gather user input (from the PSMove and keyboard) and feed a simulation pipeline. Some parts run in a parallel fashion, like the tracking algorithms for the PSMove and Qt's main thread; some others -like raycast algorithms- make heavy use of OpenMP's features, especially the fork-join pattern for spawning multiple threads.\r\n\r\nThe core loop uses a raycast algorithm beginning from the tip of the transducer -across the virtual torso- to simulate the ultrasound wave front. The algorithm calculates echoes along the ray, and draws them accordingly, resembling an ultrasound image. This is all done in real time, as students use the PSMove to redirect the raycast and discover internal anatomic structures within the body.\r\n\r\nSimeco runs in Linux and Windows, and it is aimed to run smoothly on *cheap* computers (currently on i7-3610QM without dedicated GPU).\r\n\r\nI have been a part of the team since the project started, and the only member with previous C++ professional experience. As such, I have taken the personal goal to push everyone's knowledge, *especially* mine.\r\n\r\nCode isn't public, though some of the experiments I've been doing in the background are. Check them out [here](github.com/Blito/VTK-QT) and [here](github.com/Blito/VTK-SFML)!\r\n\r\n##### Screenshots\r\n\r\n##### Technologies used\r\nC++11 (lambdas, threads, smart pointers, and other new features), [VTK](www.vtk.org), [Qt5](www.qt.io), [OpenMP](www.openmp.org), [OpenCV](ww.opencv.org), [glm](glm.g-truc.net), [psmoveapi](github.com/thp/psmoveapi), [Google Test](github.com/google/googletest), [CMake](www.cmake.org), git.\r\n\r\n---\r\n\r\n## Recreito\r\n[2015 (*in progress*), [go to repo](github.com/Blito/Recreito)]\r\n\r\nSecond attempt at doing a 3D world from scratch. This time using newly acquired knowledge and spending a little more time thinking before coding.\r\n\r\nThe original idea was to learn modern OpenGL (ie. shading, lightning systems, etc), make a more robust build system, and integrate it with other libraries such as BulletPhysics and Assimp. After doing most of it (BulletPhysics still missing), I decided I would refactor the existing code to an Entity-Component-Systems architecture. So far, most of the work has been reading various implementations, although some tests indicate that it shouldn't be too hard to change what I have up to this point.\r\n\r\nThe project has been a good place to learn lightning systems, which I implemented following the tutorials at <learnopengl.com>\r\n\r\n##### Screenshots\r\n\r\n##### Technologies used\r\nC++11, OpenGL3+, [SDL2](www.libsdl.org), [glm](glm.g-truc.net), [glew](glew.sourceforge.net/), [SOIL](www.lonesock.net/soil.html), [Assimp](github.com/assimp/assimp), [CMake](www.cmake.org), git (using git submodules).\r\n\r\n---\r\n\r\n## Unreal Engine FPS Demo\r\n[2014, [go to repo](github.com/Blito/glbpaintball)]\r\n\r\nInitially called Paintball FPS game, since bullets were balls affected by gravity. This project was developed as a tech demo for the company I worked at, Globant. It aimed at giving a small team of developers and artists the oportunity to get their hands on the Unreal Engine 4 (back when license was paid).\r\n\r\nThe final prototype was far from having *unique* features, but it was a nice experience to see how things were made in a top-class engine. Some features included:\r\n\r\n- Two levels with miniquests (push a button, kill a unit).\r\n- Several weapons (with ammo system!).\r\n- Interaction with environment objects (doors, damage over time platforms, etc).\r\n- Pick ups and power ups.\r\n- Patrolling and static enemies, with different behavioral trees.\r\n- Triggers.\r\n- Cinematics.\r\n\r\n##### Screenshots\r\n![In Game Screenshot](images/paintball/ue4-ss03.jpg)\r\n\r\n##### Technoogies used\r\n[Unreal Engine 4](www.unrealengine.com) (C++ and blueprints), Visual Studio, git.\r\n\r\n---\r\n\r\n## Unity RTS Demo\r\n[2014, [go to repo](github.com/Blito/UnityRTS)]\r\n\r\nSmall project to get my hands on Unity... again.\r\n\r\nFollowed a few tutorials at first, and also implemented a few ideas of mine. Final result was a very simple RTS prototype, its features being:\r\n\r\n- Camera control.\r\n- Allied and enemy units.\r\n- Unit behaviors: attack, move (using default pathfinding), reproduce (unit spawning), stay on guard.\r\n- Multiple unit selection.\r\n- Simple HUD.\r\n\r\n##### Screenshots\r\n\r\n##### Technologies used\r\n[Unity](www.unity3d.com)\r\n\r\n---\r\n\r\n## BulletDemo\r\n[2014, [go to repo](github.com/Blito/BulletDemo)]\r\n\r\nFirst attempt at doing a 3D world from scratch. \r\n\r\nIntegrated BulletPhysics, OpenGL (initially old OpenGL, eventually refactored to OpenGL3) and SDL. Ran into a lot of problems as I tried to include more functionality (like importing 3D models, applying lights, etc), so I decided to stop and get back once I got better. I eventually started Recreito, having learned some lessons:\r\n\r\n- Fun (having a good time while doing it) comes first.\r\n- It is fine to have a limited scope. This version of a 3d world may not be able to load every asset on Earth, or play sounds, or build on Linux, or render shadows, or have an AI engine, or... And it's ok.\r\n- I should pay more attention to the build process if I want someone to be able to use it.\r\n- Read several ways of doing something before writing code, even if our first idea works.\r\n\r\nThe project loads up a 3D space with the user being close to a few boxes and a cloth hanging in the air. User can move, turn, strafe, jump and shoot smaller boxes when clicking. The demo uses soft-body physics for the cloth, and allows the user to interact with it with boxes.\r\n\r\n##### Screenshots\r\n\r\n##### Technologies used\r\nC++, [BulletPhysics](www.bulletphysics.org), OpenGL3, [SDL2](www.libsdl.org), Visual Studio 2010, git.\r\n\r\n---\r\n\r\n## I am Mutsu, please save me!\r\n[*Global Game Jam 2014*, [GGJ site](globalgamejam.org/2014/games/i-am-mutsu-please-save-me), [go to repo](bitbucket.org/JojoBatista/i-am-mutsu-please-save-me)]\r\n\r\nGame developed for the Global Game Jam 2014, my first experience in an event like that. We worked for 36 hours straight, with a team that I met on site for the first time. It was overall a great experience: game design, collaboration, and a lot of [mate](en.wikipedia.org/wiki/Mate_(beverage))!\r\n\r\nThe game was a side-scrolling platformer. The main mechanic consisted of picking up RGB-colored gems, and being able to switch colors on/off. Platforms would be colored, and turning them on/off appropriately was part of the puzzle.\r\n\r\n##### Screenshots\r\n\r\n##### Technologies used\r\n[Unity](www.unity3d.com)\r\n\r\n---\r\n\r\n## Other stuff\r\n\r\n### League of Legends Wikia\r\n[2015, [go to repo](github.com/Blito/wikialol)]\r\n\r\nI have been playing League of Legends for the last 5 years. I first started playing in North America, and eventually moved to the Latin America South server. I realized the need for spanish resources for new players, so I decided to help -along with a friend- in the most popular League of Legends wikia.\r\n\r\nOur first impression was that the spanish wikia had been abandoned for years. A few months later I had applied for moderator, and after that for administrator ([my profile](es.leagueoflegends.wikia.com/wiki/Usuario:Bleetoh)). For over a year, I spearheaded a collective effort towards building a new wiki for the game. By the end of it, visitors per week had risen from 7000 to more than 80000. My participation stopped for work-related reasons, but it was enough for a group of people to keep on editing on their own.\r\n\r\nDuring my stay, I implemented a few scripts in Python to update the [Free Champion rotation](leagueoflegends.wikia.com/wiki/Free_champion_rotation) in a weekly basis. These scripts use the Riot REST API and the MediaWiki API to automatically update the required pages.\r\n\r\n### Escape de Scylla\r\nBack in 2011 I participated in the [Wiideojuegos 2011](http://wiideojuegos-upm.blogspot.com) contest, held by the Universidad Polit√©cnica de Madrid, in Spain. We developed a game using Kinect -a novel device at the time- and got the first place award for Kinect category. The code eventually evolved into my thesis for becoming a Software Engineer: *Game development framework for Kinect-based games*.\r\n\r\nThe game consisted in a spaceship scientist awakened by the call of an emergency alarm. The player, playing as the scientist, had to escape from Scylla (the spacecraft) while getting rid of small nanobots attaching to his body. We developed the game in C++ using [OpenFrameworks](www.openframeworks.cc), Boost (mainly for Boost.Thread), and [MSAPhysics](www.memo.tv/ofxmsaphysics/) (a small particle engine). \r\n\r\nYou can see the trailer submitted for the contest [here](www.youtube.com/watch?v=llM06oUeSYQ).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}